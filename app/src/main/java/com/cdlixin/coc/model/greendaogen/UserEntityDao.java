package com.cdlixin.coc.model.greendaogen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cdlixin.coc.entity.UserEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_ENTITY".
*/
public class UserEntityDao extends AbstractDao<UserEntity, Long> {

    public static final String TABLENAME = "USER_ENTITY";

    /**
     * Properties of entity UserEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TableId = new Property(0, Long.class, "tableId", true, "_id");
        public final static Property S_token = new Property(1, String.class, "s_token", false, "S_TOKEN");
        public final static Property U_id = new Property(2, String.class, "u_id", false, "U_ID");
        public final static Property U_name = new Property(3, String.class, "u_name", false, "U_NAME");
        public final static Property U_logo_url = new Property(4, String.class, "u_logo_url", false, "U_LOGO_URL");
        public final static Property U_post = new Property(5, String.class, "u_post", false, "U_POST");
        public final static Property U_male = new Property(6, boolean.class, "u_male", false, "U_MALE");
    }

    private DaoSession daoSession;


    public UserEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: tableId
                "\"S_TOKEN\" TEXT," + // 1: s_token
                "\"U_ID\" TEXT," + // 2: u_id
                "\"U_NAME\" TEXT," + // 3: u_name
                "\"U_LOGO_URL\" TEXT," + // 4: u_logo_url
                "\"U_POST\" TEXT," + // 5: u_post
                "\"U_MALE\" INTEGER NOT NULL );"); // 6: u_male
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserEntity entity) {
        stmt.clearBindings();
 
        Long tableId = entity.getTableId();
        if (tableId != null) {
            stmt.bindLong(1, tableId);
        }
 
        String s_token = entity.getS_token();
        if (s_token != null) {
            stmt.bindString(2, s_token);
        }
 
        String u_id = entity.getU_id();
        if (u_id != null) {
            stmt.bindString(3, u_id);
        }
 
        String u_name = entity.getU_name();
        if (u_name != null) {
            stmt.bindString(4, u_name);
        }
 
        String u_logo_url = entity.getU_logo_url();
        if (u_logo_url != null) {
            stmt.bindString(5, u_logo_url);
        }
 
        String u_post = entity.getU_post();
        if (u_post != null) {
            stmt.bindString(6, u_post);
        }
        stmt.bindLong(7, entity.getU_male() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserEntity entity) {
        stmt.clearBindings();
 
        Long tableId = entity.getTableId();
        if (tableId != null) {
            stmt.bindLong(1, tableId);
        }
 
        String s_token = entity.getS_token();
        if (s_token != null) {
            stmt.bindString(2, s_token);
        }
 
        String u_id = entity.getU_id();
        if (u_id != null) {
            stmt.bindString(3, u_id);
        }
 
        String u_name = entity.getU_name();
        if (u_name != null) {
            stmt.bindString(4, u_name);
        }
 
        String u_logo_url = entity.getU_logo_url();
        if (u_logo_url != null) {
            stmt.bindString(5, u_logo_url);
        }
 
        String u_post = entity.getU_post();
        if (u_post != null) {
            stmt.bindString(6, u_post);
        }
        stmt.bindLong(7, entity.getU_male() ? 1L: 0L);
    }

    @Override
    protected final void attachEntity(UserEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserEntity readEntity(Cursor cursor, int offset) {
        UserEntity entity = new UserEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // tableId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // s_token
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // u_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // u_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // u_logo_url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // u_post
            cursor.getShort(offset + 6) != 0 // u_male
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserEntity entity, int offset) {
        entity.setTableId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setS_token(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setU_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setU_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setU_logo_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setU_post(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setU_male(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserEntity entity, long rowId) {
        entity.setTableId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserEntity entity) {
        if(entity != null) {
            return entity.getTableId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserEntity entity) {
        return entity.getTableId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
