package com.cdlixin.coc.model.greendaogen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.cdlixin.coc.entity.OrgEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORG_ENTITY".
*/
public class OrgEntityDao extends AbstractDao<OrgEntity, Long> {

    public static final String TABLENAME = "ORG_ENTITY";

    /**
     * Properties of entity OrgEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TableId = new Property(0, Long.class, "tableId", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property C_id = new Property(2, String.class, "c_id", false, "C_ID");
        public final static Property C_type = new Property(3, int.class, "c_type", false, "C_TYPE");
        public final static Property C_name = new Property(4, String.class, "c_name", false, "C_NAME");
        public final static Property C_logo_url = new Property(5, String.class, "c_logo_url", false, "C_LOGO_URL");
        public final static Property U_type = new Property(6, int.class, "u_type", false, "U_TYPE");
    }

    private Query<OrgEntity> userEntity_OrgsQuery;

    public OrgEntityDao(DaoConfig config) {
        super(config);
    }
    
    public OrgEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORG_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: tableId
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"C_ID\" TEXT," + // 2: c_id
                "\"C_TYPE\" INTEGER NOT NULL ," + // 3: c_type
                "\"C_NAME\" TEXT," + // 4: c_name
                "\"C_LOGO_URL\" TEXT," + // 5: c_logo_url
                "\"U_TYPE\" INTEGER NOT NULL );"); // 6: u_type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORG_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OrgEntity entity) {
        stmt.clearBindings();
 
        Long tableId = entity.getTableId();
        if (tableId != null) {
            stmt.bindLong(1, tableId);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String c_id = entity.getC_id();
        if (c_id != null) {
            stmt.bindString(3, c_id);
        }
        stmt.bindLong(4, entity.getC_type());
 
        String c_name = entity.getC_name();
        if (c_name != null) {
            stmt.bindString(5, c_name);
        }
 
        String c_logo_url = entity.getC_logo_url();
        if (c_logo_url != null) {
            stmt.bindString(6, c_logo_url);
        }
        stmt.bindLong(7, entity.getU_type());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OrgEntity entity) {
        stmt.clearBindings();
 
        Long tableId = entity.getTableId();
        if (tableId != null) {
            stmt.bindLong(1, tableId);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String c_id = entity.getC_id();
        if (c_id != null) {
            stmt.bindString(3, c_id);
        }
        stmt.bindLong(4, entity.getC_type());
 
        String c_name = entity.getC_name();
        if (c_name != null) {
            stmt.bindString(5, c_name);
        }
 
        String c_logo_url = entity.getC_logo_url();
        if (c_logo_url != null) {
            stmt.bindString(6, c_logo_url);
        }
        stmt.bindLong(7, entity.getU_type());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OrgEntity readEntity(Cursor cursor, int offset) {
        OrgEntity entity = new OrgEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // tableId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // c_id
            cursor.getInt(offset + 3), // c_type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // c_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // c_logo_url
            cursor.getInt(offset + 6) // u_type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OrgEntity entity, int offset) {
        entity.setTableId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setC_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setC_type(cursor.getInt(offset + 3));
        entity.setC_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setC_logo_url(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setU_type(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OrgEntity entity, long rowId) {
        entity.setTableId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OrgEntity entity) {
        if(entity != null) {
            return entity.getTableId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OrgEntity entity) {
        return entity.getTableId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "orgs" to-many relationship of UserEntity. */
    public List<OrgEntity> _queryUserEntity_Orgs(Long userId) {
        synchronized (this) {
            if (userEntity_OrgsQuery == null) {
                QueryBuilder<OrgEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                userEntity_OrgsQuery = queryBuilder.build();
            }
        }
        Query<OrgEntity> query = userEntity_OrgsQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
